import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.TimeUnit;

import org.apache.maven.model.Dependency;
import org.apache.maven.model.Model;
import org.apache.maven.model.io.xpp3.MavenXpp3Reader;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

/**
 * 
 */

/**
 * @author narender
 *
 */
public class Main {

	/**
	 * 
	 */
	public Main() {
	}

	/**
	 * @param args
	 * @throws XmlPullParserException 
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException, XmlPullParserException {
		ForkJoinPool pool = new ForkJoinPool();
		FolderProcessor apps = new FolderProcessor("/Users/tejpal/Documents/Workspace/Code/mvn-graph", "pom.xml");
		//Execute the three tasks in the pool using the execute() method.
		pool.execute(apps);
		//Write to the console information about the status of the pool every second
		//until the three tasks have finished their execution.
		do
		{
			System.out.printf("******************************************\n");
			System.out.printf("Main: Parallelism: %d\n", pool.getParallelism());
			System.out.printf("Main: Active Threads: %d\n", pool.getActiveThreadCount());
			System.out.printf("Main: Task Count: %d\n", pool.getQueuedTaskCount());
			System.out.printf("Main: Steal Count: %d\n", pool.getStealCount());
			System.out.printf("******************************************\n");
			try
			{
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		} while (!apps.isDone());
		//Shut down ForkJoinPool using the shutdown() method.
		pool.shutdown();
		//Write the number of results generated by each task to the console.
		List<String> results;
		results = apps.join();
		System.out.printf("Apps: %d files found.\n", results.size());
		System.out.printf("Documents: %d files found.\n", results.size());
		for(String file:results){
			Reader reader = new FileReader(file);
			Model model=null;
			try {
				MavenXpp3Reader xpp3Reader = new MavenXpp3Reader();
				model = xpp3Reader.read(reader);
			} finally {
				reader.close();
			}
			// Print the dependencies on the console
			@SuppressWarnings("unchecked")
			final List<Dependency> dependencies = model.getDependencies();
			String dependencyList="\n";
			for (int i = 0; i < dependencies.size(); i++) {
				final Dependency dependency = dependencies.get(i);
				dependencyList+="\t"+dependency.getGroupId()+"|"+ dependency.getArtifactId()+"|"+dependency.getVersion() +"|"+dependency.getScope()+"\n";
			}
			System.out.println(file);
			System.out.println(dependencyList);
		}

	}

}
